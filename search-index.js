var searchIndex = {};
searchIndex["ihex"] = {"doc":"# The IHEX Library","items":[[0,"checksum","ihex","Function for computing IHEX checksum.",null,null],[5,"checksum","ihex::checksum","Computes the Intel HEX checksum of `data`. This is done by summing all the bytes `data\nand taking the two&#39;s complement of the least significant byte of the sum.",null,null],[0,"reader","ihex","Operations for parsing IHEX records and object files.",null,null],[3,"Reader","ihex::reader","",null,null],[4,"ReaderError","","",null,null],[13,"MissingStartCode","","The record provided does not begin with a &#39;:&#39;.",0,null],[13,"RecordTooShort","","The record provided is shorter than the smallest valid.",0,null],[13,"RecordTooLong","","The record provided exceeds the maximum size (255b payload).",0,null],[13,"RecordNotEvenLength","","The record is not an even number of bytes.",0,null],[13,"ContainsInvalidCharacters","","The record is not all hexadecimal characters.",0,null],[13,"ChecksumMismatch","","The checksum did not match.",0,null],[13,"PayloadLengthMismatch","","The record is not the length it claims.",0,null],[13,"UnsupportedRecordType","","The record type is not supported.",0,null],[13,"InvalidLengthForType","","The payload length does not match the record type.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"readererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"readererror"}],"output":{"name":"readererror"}}],[11,"eq","","",0,{"inputs":[{"name":"readererror"},{"name":"readererror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"readererror"},{"name":"readererror"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"readererror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"readererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_stopping_after_error_and_eof","","",1,{"inputs":[{"name":"str"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"new","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",1,{"inputs":[{"name":"reader"}],"output":{"name":"option"}}],[0,"record","ihex","An Intel HEX record type.",null,null],[4,"Record","ihex::record","",null,null],[13,"Data","","Specifies a 16-bit offset address and up to 255 bytes of data.\nAvailability: I8HEX, I16HEX and I32HEX.",2,null],[12,"offset","ihex::record::Record","The offset of the data record in memory.",2,null],[12,"value","","Up to 255 bytes of data to be written to memory.",2,null],[13,"EndOfFile","ihex::record","Indicates the end of the object file. Must occur exactly once per file, at the end.\nAvailability: I8HEX, I16HEX and I32HEX.",2,null],[13,"ExtendedSegmentAddress","","Specifies bits 4-19 of the Segment Base Address (SBA) to address up to 1MiB.\nAvailability: I16HEX.",2,null],[13,"StartSegmentAddress","","Specifies the 20-bit segment address via the CS and IP registers.\nAvailability: I16HEX.",2,null],[12,"cs","ihex::record::Record","Value of the CS register.",2,null],[12,"ip","","Value of the IP register.",2,null],[13,"ExtendedLinearAddress","ihex::record","Specifies the upper 16 bits of a 32-bit linear address.\nThe lower 16 bits are derived from the Data record load offset.\nAvailability: I32HEX.",2,null],[13,"StartLinearAddress","","Specifies the execution start address for the object file.\nThis is the 32-bit linear address for register EIP.\nAvailability: I32HEX.",2,null],[0,"types","","",null,null],[17,"DATA","ihex::record::types","Type specifier for a Data record.",null,null],[17,"END_OF_FILE","","Type specifier for an End-Of-File record.",null,null],[17,"EXTENDED_SEGMENT_ADDRESS","","Type specifier for an Extended Segment Address record.",null,null],[17,"START_SEGMENT_ADDRESS","","Type specifier for a Start Segment Address record.",null,null],[17,"EXTENDED_LINEAR_ADDRESS","","Type specifier for an Extended Linear Address record.",null,null],[17,"START_LINEAR_ADDRESS","","Type specifier for a Start Linear Address record.",null,null],[11,"fmt","ihex::record","",2,{"inputs":[{"name":"record"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"eq","","",2,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"bool"}}],[11,"record_type","","Returns the record type specifier corresponding to the receiver.",2,{"inputs":[{"name":"record"}],"output":{"name":"u8"}}],[0,"writer","ihex","Operations for generating IHEX records and object files.",null,null],[4,"WriterError","ihex::writer","",null,null],[13,"DataExceedsMaximumLength","","A record contains data too large to represent.",3,null],[13,"MissingEndOfFileRecord","","Object does not end in an EoF record.",3,null],[13,"MultipleEndOfFileRecords","","Object contains multiple EoF records.",3,null],[5,"create_object_file_representation","","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"writererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"writererror"}],"output":{"name":"writererror"}}],[11,"eq","","",3,{"inputs":[{"name":"writererror"},{"name":"writererror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"writererror"},{"name":"writererror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"writererror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"writererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","ihex::record","",2,{"inputs":[{"name":"record"}],"output":{"name":"result"}}],[11,"from_record_string","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[4,"ReaderError"],[3,"Reader"],[4,"Record"],[4,"WriterError"]]};
initSearch(searchIndex);
